self.addEventListener( 'install', function(event) {
    event.waitUntil(preLoad());
});

var preLoad = function() {
    console.log('[PWA] Install Event processing');
    return caches.open('pwa-offline').then(function(cache) {
        console.log('[PWA] Cached index and offline page during Install');
        return cache.addAll(['/offline']);
    });
}

self.addEventListener( 'fetch', function(event) {
    console.log('[PWA] The service worker is serving the asset');
    event.respondWith(checkResponse(event.request).catch(function() {
        return returnFromCache(event.request);
    }));
    event.waitUntil(addToCache(event.request));
});

var checkResponse = function(request) {
    return new Promise(function( fulfill, reject ) {
        fetch(request).then(function(response) {
            if( response.status !== 404 ) {
                fulfill(response);
            } else {
                reject();
            };
        }, reject)
    });
};

var addToCache = function(request) {
    return caches.open('pwa-offline').then(function(cache) {
        return fetch(request).then(function(response) {
            console.log( '[PWA] Add page to cache: ', response.url );
            return cache.put( request, response );
        });
    });
};

var returnFromCache = function(request) {
    return caches.open('pwa-offline').then(function(cache) {
        return cache.match(request).then(function(matching) {
            if( !matching || matching.status == 404 ) {
                return cache.match('offline');
            } else {
                return matching;
            };
        });
    });
};

// function onActivate(event) {
//   console.log('[Serviceworker]', "Activating!", event);
//   event.waitUntil(
//     caches.keys().then(function(cacheNames) {
//       return Promise.all(
//         cacheNames.filter(function(cacheName) {
//           // Return true if you want to remove this cache,
//           // but remember that caches are shared across
//           // the whole origin
//           return cacheName.indexOf(CACHE_VERSION) !== 0;
//         }).map(function(cacheName) {
//           return caches.delete(cacheName);
//         })
//       );
//     })
//   );
// }
// self.addEventListener('activate', onActivate);
// var CACHE_VERSION = 'v1';
// var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

// function onInstall(event) {
//   console.log('[Serviceworker]', "Installing!", event);
//   event.waitUntil(
//     caches.open(CACHE_NAME).then(function prefill(cache) {
//       return cache.addAll([

//         // make sure serviceworker.js is not required by application.js
//         // if you want to reference application.js from here
//         '<%#= asset_path "application.js" %>',

//         '<%= asset_path "application.css" %>',

//         '/offline.html',

//       ]);
//     })
//   );
// }


// // Borrowed from https://github.com/TalAter/UpUp
// function onFetch(event) {
//   // Fetch from network, fallback to cached content, then offline.html for same-origin GET requests
//   var request = event.request;

//   if (!request.url.match(/^https?:\/\/example.com/) ) { return; }
//   if (request.method !== 'GET') { return; }

//   event.respondWith(
//     fetch(request)                                        // first, the network
//       .catch(function fallback() {
//          caches.match(request).then(function(response) {  // then, the cache
//            response || caches.match("/offline.html");     // then, /offline cache
//          })
//        })
//   );

//   // See https://jakearchibald.com/2014/offline-cookbook/#on-network-response for more examples
// }

// self.addEventListener('install', onInstall);
// self.addEventListener('fetch', onFetch);
